name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run unit tests
        run: |
          # Skip gemini tests as they require API key
          go test -v $(go list ./... | grep -v /pkg/gemini) -coverprofile=coverage.txt

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: false
          skip-cache: true
          skip-pkg-cache: true
          skip-build-cache: true
          install-mode: binary

  build:
    name: Build and Push
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ggcache:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/ggcache:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ggcache:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ggcache:buildcache,mode=max
